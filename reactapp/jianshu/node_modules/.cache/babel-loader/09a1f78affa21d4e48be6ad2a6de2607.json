{"ast":null,"code":"import * as actionsTypes from './actionTypes';\nimport { fromJS } from 'immutable'; // const defaultProps = {\n//     focused: false\n// }\n\nconst defaultProps = fromJS({\n  // immutable 对象 （不可变对象）\n  focused: false,\n  list: [],\n  //注意： 因为外面使用了 fromJS 所以为 immutable 对象 list 也被处理成 immutable对象了\n  mouseIn: false,\n  total: 0,\n  page: 1,\n  totalPage: 1\n}); // export default (state=defaultProps, action) =>{ // 这里的state 就是 header\n//     if(action.type===actionsTypes.HANDEL_INPUT_ONFOCUS){\n//        return state.set('focused',true)\n//         // set（） 修改 数据 结合原始之前的 immutable 对象的的数据。和传入的设置的值，返回一个全新的对象\n//         // get() 组件中就不能直接用如（state.header.focused 到 state.header.get('focused').因为是immutable 对象\n//     }\n//     if(action.type===actionsTypes.HANDEL_INPUT_ONBLUR){\n//         // return { // reducer 接受到原始的state 数据 一定不能对原始的state进行修改， 而应该返回一个新的state\n//         //         //  未来防止 人为误操作 使用 facebook 的 immutable库 （原理：不可变动js对象，返回一个新的对象，类似于深拷贝）\n//         //     focused: false\n//         // }\n//         return state.set('focused',false)\n//     }\n//     if(action.type===actionsTypes.HANDEL_INPUT_ONFOCUS_AJAX){\n//         return state.set('list', action.data) // 注意： list 已经是一个immutable 数组了 所以不能把普通的数组赋值给他\n//     }\n//     return state\n// }\n// 使用switch\n\nexport default ((state = defaultProps, action) => {\n  switch (action.type) {\n    case actionsTypes.HANDEL_INPUT_ONFOCUS:\n      return state.set('focused', true);\n\n    case actionsTypes.HANDEL_INPUT_ONBLUR:\n      return state.set('focused', false);\n\n    case actionsTypes.HANDEL_INPUT_ONFOCUS_AJAX:\n      // return state.set('list', action.data).set('totalPage', action.totalPage);\n      return state.merge({\n        list: action.data,\n        totalPage: action.totalPage,\n        total: action.total\n      });\n\n    case actionsTypes.ON_MOUSE_ENTER:\n      return state.set('mouseIn', true);\n\n    case actionsTypes.ON_MOUSE_LEAVE:\n      return state.set('mouseIn', false);\n\n    case actionsTypes.ON_CHANGE_PAGE:\n      return state.set('page', action.page);\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/w770s/learning/reactapp/jianshu/src/common/Header/store/reducer.js"],"names":["actionsTypes","fromJS","defaultProps","focused","list","mouseIn","total","page","totalPage","state","action","type","HANDEL_INPUT_ONFOCUS","set","HANDEL_INPUT_ONBLUR","HANDEL_INPUT_ONFOCUS_AJAX","merge","data","ON_MOUSE_ENTER","ON_MOUSE_LEAVE","ON_CHANGE_PAGE"],"mappings":"AAAA,OAAO,KAAKA,YAAZ,MAA8B,eAA9B;AACA,SAASC,MAAT,QAAuB,WAAvB,C,CACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAGD,MAAM,CAAC;AAAE;AAC1BE,EAAAA,OAAO,EAAE,KADe;AAExBC,EAAAA,IAAI,EAAC,EAFmB;AAEd;AACVC,EAAAA,OAAO,EAAE,KAHe;AAIxBC,EAAAA,KAAK,EAAE,CAJiB;AAKxBC,EAAAA,IAAI,EAAE,CALkB;AAMxBC,EAAAA,SAAS,EAAE;AANa,CAAD,CAA3B,C,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,gBAAe,CAACC,KAAK,GAACP,YAAP,EAAoBQ,MAApB,KAA6B;AACxC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKX,YAAY,CAACY,oBAAlB;AACI,aAAOH,KAAK,CAACI,GAAN,CAAU,SAAV,EAAoB,IAApB,CAAP;;AACJ,SAAKb,YAAY,CAACc,mBAAlB;AACI,aAAOL,KAAK,CAACI,GAAN,CAAU,SAAV,EAAoB,KAApB,CAAP;;AACJ,SAAKb,YAAY,CAACe,yBAAlB;AACI;AACA,aAAON,KAAK,CAACO,KAAN,CAAY;AACfZ,QAAAA,IAAI,EAAEM,MAAM,CAACO,IADE;AAEfT,QAAAA,SAAS,EAAEE,MAAM,CAACF,SAFH;AAGfF,QAAAA,KAAK,EAAEI,MAAM,CAACJ;AAHC,OAAZ,CAAP;;AAKJ,SAAKN,YAAY,CAACkB,cAAlB;AACI,aAAOT,KAAK,CAACI,GAAN,CAAU,SAAV,EAAqB,IAArB,CAAP;;AACJ,SAAKb,YAAY,CAACmB,cAAlB;AACI,aAAOV,KAAK,CAACI,GAAN,CAAU,SAAV,EAAqB,KAArB,CAAP;;AACJ,SAAKb,YAAY,CAACoB,cAAlB;AACI,aAAOX,KAAK,CAACI,GAAN,CAAU,MAAV,EAAkBH,MAAM,CAACH,IAAzB,CAAP;;AACJ;AACI,aAAOE,KAAP;AAnBR;AAqBH,CAtBD","sourcesContent":["import * as actionsTypes from './actionTypes'\nimport { fromJS } from 'immutable'\n// const defaultProps = {\n//     focused: false\n// }\n\nconst defaultProps = fromJS({ // immutable 对象 （不可变对象）\n    focused: false,\n    list:[],  //注意： 因为外面使用了 fromJS 所以为 immutable 对象 list 也被处理成 immutable对象了\n    mouseIn: false,\n    total: 0,\n    page: 1,\n    totalPage: 1\n})\n// export default (state=defaultProps, action) =>{ // 这里的state 就是 header\n//     if(action.type===actionsTypes.HANDEL_INPUT_ONFOCUS){\n//        return state.set('focused',true)\n//         // set（） 修改 数据 结合原始之前的 immutable 对象的的数据。和传入的设置的值，返回一个全新的对象\n//         // get() 组件中就不能直接用如（state.header.focused 到 state.header.get('focused').因为是immutable 对象\n//     }\n//     if(action.type===actionsTypes.HANDEL_INPUT_ONBLUR){\n//         // return { // reducer 接受到原始的state 数据 一定不能对原始的state进行修改， 而应该返回一个新的state\n//         //         //  未来防止 人为误操作 使用 facebook 的 immutable库 （原理：不可变动js对象，返回一个新的对象，类似于深拷贝）\n//         //     focused: false\n//         // }\n//         return state.set('focused',false)\n//     }\n//     if(action.type===actionsTypes.HANDEL_INPUT_ONFOCUS_AJAX){\n//         return state.set('list', action.data) // 注意： list 已经是一个immutable 数组了 所以不能把普通的数组赋值给他\n//     }\n//     return state\n// }\n\n// 使用switch\nexport default (state=defaultProps,action)=>{\n    switch (action.type) {\n        case actionsTypes.HANDEL_INPUT_ONFOCUS:\n            return state.set('focused',true);\n        case actionsTypes.HANDEL_INPUT_ONBLUR:\n            return state.set('focused',false);\n        case actionsTypes.HANDEL_INPUT_ONFOCUS_AJAX:\n            // return state.set('list', action.data).set('totalPage', action.totalPage);\n            return state.merge({\n                list: action.data,\n                totalPage: action.totalPage,\n                total: action.total\n            })\n        case actionsTypes.ON_MOUSE_ENTER:\n            return state.set('mouseIn', true);\n        case actionsTypes.ON_MOUSE_LEAVE:\n            return state.set('mouseIn', false);\n        case actionsTypes.ON_CHANGE_PAGE:\n            return state.set('page', action.page);\n        default:\n            return state\n    }\n}\n"]},"metadata":{},"sourceType":"module"}