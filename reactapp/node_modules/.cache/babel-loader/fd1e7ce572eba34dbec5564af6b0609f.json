{"ast":null,"code":"import { takeEvery, put } from 'redux-saga/effects';\nimport { INIT_SagaList_DATA } from './actionTypes';\nimport { getInitListData } from \"./actionCreator\";\nimport axios from \"axios\"; // generator 函数\n\nfunction* mySaga() {\n  yield takeEvery(INIT_SagaList_DATA, fetchUser); // 捕获到INIT_SagaList_DATA，调用fetchUser 方法\n}\n\nfunction* fetchUser() {\n  try {\n    const res = yield axios.get('https://www.easy-mock.com/mock/5d3c3aeef0de8870c9ba1b31/example/todolist');\n    const action = getInitListData(res.data.data);\n    yield put(action); //yield 等前面执行完了 在执行\n  } catch (e) {\n    console.log('请求失败');\n  } // yield  axios.get('https://www.easy-mock.com/mock/5d3c3aeef0de8870c9ba1b31/example/todolist')\n  //         .then((res)=>{\n  //             const data = res.data.data\n  //             const action = getInitListData(data)\n  //             put(action); // 看不到数据\n  //         })\n\n} // 使用 takeEvery 去捕获 到每一次 派发出的action了\n\n\nexport default mySaga; //sage 也能接受到 action ，捕获 type ,执行异步 axios请求 实行了把异步流程拆分到saga 文件管理了","map":{"version":3,"sources":["/Users/w770s/learning/reactapp/src/store/sagas.js"],"names":["takeEvery","put","INIT_SagaList_DATA","getInitListData","axios","mySaga","fetchUser","res","get","action","data","e","console","log"],"mappings":"AAAA,SAASA,SAAT,EAAmBC,GAAnB,QAA8B,oBAA9B;AACA,SAAQC,kBAAR,QAAiC,eAAjC;AACA,SAAQC,eAAR,QAA8B,iBAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,UAAUC,MAAV,GAAmB;AACf,QAAML,SAAS,CAACE,kBAAD,EAAqBI,SAArB,CAAf,CADe,CACiC;AACnD;;AAED,UAAUA,SAAV,GAAsB;AAClB,MAAG;AACC,UAAMC,GAAG,GAAG,MAAMH,KAAK,CAACI,GAAN,CAAU,0EAAV,CAAlB;AACA,UAAMC,MAAM,GAAGN,eAAe,CAACI,GAAG,CAACG,IAAJ,CAASA,IAAV,CAA9B;AACA,UAAMT,GAAG,CAACQ,MAAD,CAAT,CAHD,CAGoB;AACtB,GAJD,CAKA,OAAOE,CAAP,EAAU;AACNC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH,GARiB,CAUlB;AACA;AACA;AACA;AACA;AACA;;AACH,C,CAED;;;AACA,eAAeR,MAAf,C,CAEA","sourcesContent":["import { takeEvery,put } from 'redux-saga/effects'\nimport {INIT_SagaList_DATA} from './actionTypes'\nimport {getInitListData} from \"./actionCreator\";\nimport axios from \"axios\";\n\n// generator 函数\nfunction* mySaga() {\n    yield takeEvery(INIT_SagaList_DATA, fetchUser); // 捕获到INIT_SagaList_DATA，调用fetchUser 方法\n}\n\nfunction* fetchUser() {\n    try{\n        const res = yield axios.get('https://www.easy-mock.com/mock/5d3c3aeef0de8870c9ba1b31/example/todolist');\n        const action = getInitListData(res.data.data);\n        yield put(action); //yield 等前面执行完了 在执行\n    }\n    catch (e) {\n        console.log('请求失败')\n    }\n\n    // yield  axios.get('https://www.easy-mock.com/mock/5d3c3aeef0de8870c9ba1b31/example/todolist')\n    //         .then((res)=>{\n    //             const data = res.data.data\n    //             const action = getInitListData(data)\n    //             put(action); // 看不到数据\n    //         })\n}\n\n// 使用 takeEvery 去捕获 到每一次 派发出的action了\nexport default mySaga;\n\n//sage 也能接受到 action ，捕获 type ,执行异步 axios请求 实行了把异步流程拆分到saga 文件管理了\n"]},"metadata":{},"sourceType":"module"}