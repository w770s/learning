{"ast":null,"code":"var _jsxFileName = \"/Users/w770s/learning/reactapp/src/TestReactRedux.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport TestReactReduxUI from './TestReactReduxUI';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\n\nimport { getInitSagaLst, getInputVlaue, getStoreSubmit, getDeleteStoreListItem } from './store/actionCreator';\nimport store from \"./store\";\n\nclass TestReactRedux extends Component {\n  componentDidMount() {\n    //thunk: 当action是函数是，执行里面的函数 ,,reducer接受action 外 saga文件单独管理action（也可以接受action了）\n    const action = getInitSagaLst();\n    store.dispatch(action);\n  }\n\n  render() {\n    const _this$props = this.props,\n          inputValue = _this$props.inputValue,\n          list = _this$props.list,\n          handleInputChange = _this$props.handleInputChange,\n          handleStoreSubmit = _this$props.handleStoreSubmit,\n          handleDeleteItem = _this$props.handleDeleteItem;\n    return React.createElement(TestReactReduxUI, {\n      inputValue: inputValue,\n      list: list,\n      handleInputChange: handleInputChange,\n      handleStoreSubmit: handleStoreSubmit,\n      handleDeleteItem: handleDeleteItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    });\n  }\n\n} // 连接规则  不用待用 store.getState()  store.subscribe()\n\n\nconst mapStateToProps = state => {\n  // 函数 把store的数据映射到组件的props上\n  return {\n    inputValue: state.inputValue,\n    list: state.list\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  // 把 store.dispatch 映射到组件的props上 (dispatch = store.dispatch)\n  return {\n    handleInputChange(e) {\n      const action = getInputVlaue(e.target.value);\n      dispatch(action);\n    },\n\n    handleStoreSubmit() {\n      if (store.getState().inputValue === '') {\n        return;\n      }\n\n      const action = getStoreSubmit();\n      store.dispatch(action);\n    },\n\n    handleDeleteItem(index) {\n      const action = getDeleteStoreListItem(index);\n      store.dispatch(action);\n    }\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TestReactRedux); // 数据变，页面自动变\n// react-redux 第二个核心API connect，组件获取 store就要联接\n// 一认为connect 后的组件是一个容器组件","map":{"version":3,"sources":["/Users/w770s/learning/reactapp/src/TestReactRedux.js"],"names":["React","Component","connect","TestReactReduxUI","getInitSagaLst","getInputVlaue","getStoreSubmit","getDeleteStoreListItem","store","TestReactRedux","componentDidMount","action","dispatch","render","props","inputValue","list","handleInputChange","handleStoreSubmit","handleDeleteItem","mapStateToProps","state","mapDispatchToProps","e","target","value","getState","index"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,gBAAP,MAA8B,oBAA9B;AACA,OAAO,oBAAP,C,CAA6B;;AAC7B,SAAQC,cAAR,EAAwBC,aAAxB,EAAuCC,cAAvC,EAAuDC,sBAAvD,QAAoF,uBAApF;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,MAAMC,cAAN,SAA6BR,SAA7B,CAAuC;AACnCS,EAAAA,iBAAiB,GAAG;AAAC;AACjB,UAAMC,MAAM,GAAGP,cAAc,EAA7B;AACAI,IAAAA,KAAK,CAACI,QAAN,CAAeD,MAAf;AACH;;AACDE,EAAAA,MAAM,GAAG;AAAA,wBAC8E,KAAKC,KADnF;AAAA,UACEC,UADF,eACEA,UADF;AAAA,UACcC,IADd,eACcA,IADd;AAAA,UACoBC,iBADpB,eACoBA,iBADpB;AAAA,UACuCC,iBADvC,eACuCA,iBADvC;AAAA,UAC0DC,gBAD1D,eAC0DA,gBAD1D;AAEL,WACI,oBAAC,gBAAD;AACI,MAAA,UAAU,EAAEJ,UADhB;AAEI,MAAA,IAAI,EAAEC,IAFV;AAGI,MAAA,iBAAiB,EAAEC,iBAHvB;AAII,MAAA,iBAAiB,EAAEC,iBAJvB;AAKI,MAAA,gBAAgB,EAAEC,gBALtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AASH;;AAhBkC,C,CAmBvC;;;AACA,MAAMC,eAAe,GAAIC,KAAD,IAAS;AAAE;AAC/B,SAAM;AACFN,IAAAA,UAAU,EAAGM,KAAK,CAACN,UADjB;AAEFC,IAAAA,IAAI,EAAGK,KAAK,CAACL;AAFX,GAAN;AAIH,CALD;;AAQA,MAAMM,kBAAkB,GAAIV,QAAD,IAAa;AAAE;AACtC,SAAM;AACFK,IAAAA,iBAAiB,CAACM,CAAD,EAAG;AAChB,YAAMZ,MAAM,GAAGN,aAAa,CAACkB,CAAC,CAACC,MAAF,CAASC,KAAV,CAA5B;AACAb,MAAAA,QAAQ,CAACD,MAAD,CAAR;AACH,KAJC;;AAKFO,IAAAA,iBAAiB,GAAE;AACf,UAAGV,KAAK,CAACkB,QAAN,GAAiBX,UAAjB,KAA8B,EAAjC,EAAoC;AAChC;AACH;;AACD,YAAMJ,MAAM,GAAGL,cAAc,EAA7B;AACAE,MAAAA,KAAK,CAACI,QAAN,CAAeD,MAAf;AACH,KAXC;;AAYFQ,IAAAA,gBAAgB,CAACQ,KAAD,EAAO;AACnB,YAAMhB,MAAM,GAAGJ,sBAAsB,CAACoB,KAAD,CAArC;AACAnB,MAAAA,KAAK,CAACI,QAAN,CAAeD,MAAf;AACH;;AAfC,GAAN;AAiBH,CAlBD;;AAoBA,eAAeT,OAAO,CAACkB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6Cb,cAA7C,CAAf,C,CAA4E;AAC5E;AAEA","sourcesContent":["import React, {Component} from 'react';\nimport { connect } from 'react-redux'\nimport TestReactReduxUI from  './TestReactReduxUI';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nimport {getInitSagaLst, getInputVlaue, getStoreSubmit, getDeleteStoreListItem} from './store/actionCreator'\nimport store from \"./store\";\n\nclass TestReactRedux extends Component {\n    componentDidMount() {//thunk: 当action是函数是，执行里面的函数 ,,reducer接受action 外 saga文件单独管理action（也可以接受action了）\n        const action = getInitSagaLst()\n        store.dispatch(action)\n    }\n    render() {\n        const {inputValue, list, handleInputChange, handleStoreSubmit, handleDeleteItem} = this.props;\n        return(\n            <TestReactReduxUI\n                inputValue={inputValue}\n                list={list}\n                handleInputChange={handleInputChange}\n                handleStoreSubmit={handleStoreSubmit}\n                handleDeleteItem={handleDeleteItem}\n            />\n        )\n    }\n}\n\n// 连接规则  不用待用 store.getState()  store.subscribe()\nconst mapStateToProps = (state)=>{ // 函数 把store的数据映射到组件的props上\n    return{\n        inputValue : state.inputValue,\n        list:  state.list\n    }\n}\n\n\nconst mapDispatchToProps = (dispatch) =>{ // 把 store.dispatch 映射到组件的props上 (dispatch = store.dispatch)\n    return{\n        handleInputChange(e){\n            const action = getInputVlaue(e.target.value)\n            dispatch(action)\n        },\n        handleStoreSubmit(){\n            if(store.getState().inputValue===''){\n                return\n            }\n            const action = getStoreSubmit()\n            store.dispatch(action)\n        },\n        handleDeleteItem(index){\n            const action = getDeleteStoreListItem(index)\n            store.dispatch(action)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TestReactRedux) // 数据变，页面自动变\n// react-redux 第二个核心API connect，组件获取 store就要联接\n\n// 一认为connect 后的组件是一个容器组件\n"]},"metadata":{},"sourceType":"module"}